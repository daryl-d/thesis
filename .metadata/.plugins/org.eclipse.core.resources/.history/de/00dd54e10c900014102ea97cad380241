package com.daryl.thesis.loader;
import java.io.File;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

import me.prettyprint.cassandra.serializers.DoubleSerializer;
import me.prettyprint.cassandra.serializers.IntegerSerializer;
import me.prettyprint.cassandra.serializers.LongSerializer;
import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.factory.HFactory;
import me.prettyprint.hector.api.mutation.Mutator;

public class LoadFile implements Runnable {

	private final String columnFamilyName = "DATA";
	private final String file;
	private AtomicInteger count;
	private Keyspace ks;
	private StringSerializer st;

	public LoadFile(String fileName, AtomicInteger counter, Keyspace keyspace,
			StringSerializer s) {
		file = fileName;
		count = counter;
		ks = keyspace;
		st = s;

	}

	@Override
	public void run() {
		// TODO Auto-generated method stub

		File f = new File(file);
		try {
			Scanner scanner = new Scanner(f);
			String line;
			int counter = 0;

			Mutator<String> mutator = HFactory.createMutator(ks, st);
			while (scanner.hasNext()) {

				if (counter == 1000) {
					mutator.execute();
					mutator = HFactory.createMutator(ks, st);
					counter = 0;
				}
				line = scanner.nextLine();
				Scanner scanLine = new Scanner(line);
				scanLine.useDelimiter(",");

				Tick tick = new Tick(scanLine, line);
				if (tick.getTime() != 0) {
					String key = tick.getInstrument()
							+ String.format("%08d", tick.getDate())
							+ String.format("%09d", tick.getTime());
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Instrument",
									tick.getInstrument()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Date", tick.getDate(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Time", (long) tick.getTime(),
									StringSerializer.get(),
									LongSerializer.get())); // change LongType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Record_Type",
									tick.getRecord_Type()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Price", tick.getPrice(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Volume", tick.getVolume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Undisclosed_Volume",
									tick.getUndisclosed_Volume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Value", tick.getValue(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Qualifiers",
									tick.getQualifiers()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Trans_ID", tick.getTrans_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // change LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Bid_ID", tick.getBid_ID(),
									StringSerializer.get(),
									LongSerializer.get()));// change LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Ask_ID", tick.getAsk_ID(),
									StringSerializer.get(),
									LongSerializer.get()));// change LongType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Bid_Ask",
									tick.getBid_Ask()));
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Entry_Time",
									tick.getEntry_Time()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Old_Price", tick.getOld_Price(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createColumn("Old_Volume",
									tick.getOld_Volume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createColumn("Buyer_Broker_ID",
									tick.getBuyer_Broker_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Seller_Broker_ID",
									tick.getSeller_Broker_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // LongType
					System.out.println(count.incrementAndGet());
					++counter;
				}

				scanLine.close();

			}
			if (counter != 0) {
				mutator.execute();
			}
			scanner.close();
		} catch (Exception ex) {
			System.err.println("ERROR:");
			ex.printStackTrace();
		}

	}

}
