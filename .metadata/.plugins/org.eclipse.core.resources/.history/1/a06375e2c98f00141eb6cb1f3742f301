import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

import me.prettyprint.cassandra.serializers.DoubleSerializer;
import me.prettyprint.cassandra.serializers.IntegerSerializer;
import me.prettyprint.cassandra.serializers.LongSerializer;
import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.cassandra.service.CassandraHostConfigurator;
import me.prettyprint.cassandra.service.ThriftKsDef;
import me.prettyprint.hector.api.Cluster;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.ddl.ColumnFamilyDefinition;
import me.prettyprint.hector.api.ddl.ComparatorType;
import me.prettyprint.hector.api.ddl.KeyspaceDefinition;
import me.prettyprint.hector.api.factory.HFactory;
import me.prettyprint.hector.api.mutation.Mutator;


public class LoadDataFixedColumns {

	@SuppressWarnings("resource")
	public static void main(String args[]) throws FileNotFoundException {
		String keySpaceName = "TIME_SERIES_DATA";
		String columnFamilyName = "DATA";
		StringSerializer stringSerializer = StringSerializer.get();
		CassandraHostConfigurator chc = new CassandraHostConfigurator(
				"localhost");
		chc.setMaxActive(250);

		Cluster cluster = HFactory.getOrCreateCluster("Test Cluster", chc);
		if(cluster.describeKeyspace(keySpaceName) != null)
		{
			cluster.dropKeyspace(keySpaceName);
			System.err.println("removed ks: " + keySpaceName);
		}
		ColumnFamilyDefinition cfDef = HFactory.createColumnFamilyDefinition(keySpaceName, columnFamilyName, ComparatorType.UTF8TYPE);

		KeyspaceDefinition newKeyspace = HFactory.createKeyspaceDefinition(keySpaceName, ThriftKsDef.DEF_STRATEGY_CLASS,  1, Arrays.asList(cfDef));
		cluster.addKeyspace(newKeyspace);
		
		Keyspace ks = HFactory.createKeyspace(keySpaceName, cluster);
//		Scanner systemIn = new Scanner(System.in);
		int i = 0;
	//	while(systemIn.hasNext()){
			File f = new File("/media/daryl/ELEMENTS/sorted/20120831.sort");

			Scanner scanner = new Scanner(f);
			String line;
			int counter = 0;
			
			Mutator<String> mutator = HFactory.createMutator(ks,
					stringSerializer);
			while (scanner.hasNext()) {
				if (counter == 1000) {
					mutator.execute();
					mutator = HFactory.createMutator(ks, stringSerializer);
					counter = 0;
				}
				line = scanner.nextLine();
				Scanner scanLine = (new Scanner(line)).useDelimiter(",");

				Tick tick = new Tick(scanLine, line);
				if (tick.getTime() != 0) {
					String key = tick.getInstrument()
							+ String.format("%08d", tick.getDate())
							+ String.format("%09d", tick.getTime());
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Instrument",
									tick.getInstrument()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Date", tick.getDate(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Time", (long) tick.getTime(),
									StringSerializer.get(),
									LongSerializer.get())); // change LongType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Record_Type",
									tick.getRecord_Type()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Price", tick.getPrice(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Volume", tick.getVolume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Undisclosed_Volume",
									tick.getUndisclosed_Volume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Value", tick.getValue(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Qualifiers",
									tick.getQualifiers()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Trans_ID", tick.getTrans_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // change LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Bid_ID", tick.getBid_ID(),
									StringSerializer.get(),
									LongSerializer.get()));// change LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Ask_ID", tick.getAsk_ID(),
									StringSerializer.get(),
									LongSerializer.get()));// change LongType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Bid_Ask",
									tick.getBid_Ask()));
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createStringColumn("Entry_Time",
									tick.getEntry_Time()));
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Old_Price", tick.getOld_Price(),
									StringSerializer.get(),
									DoubleSerializer.get())); // change
																// DoubleType
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createColumn("Old_Volume",
									tick.getOld_Volume(),
									StringSerializer.get(),
									IntegerSerializer.get())); // change
																// Int32Type
					mutator.addInsertion(
							key,
							columnFamilyName,
							HFactory.createColumn("Buyer_Broker_ID",
									tick.getBuyer_Broker_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // LongType
					mutator.addInsertion(key, columnFamilyName, HFactory
							.createColumn("Seller_Broker_ID",
									tick.getSeller_Broker_ID(),
									StringSerializer.get(),
									LongSerializer.get())); // LongType

					++counter;
					++i;
					System.out.println(i);
				}

				scanLine.close();

			}
			if (counter != 0) {
				mutator.execute();
			}
			scanner.close();
			

//		}
	}
}
